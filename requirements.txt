Sweet — here are drop‑in files for a Kaggle/Ubuntu‑friendly `requirements.txt` plus a tiny test suite so CI/pytest won’t complain.

# requirements.txt (runtime)

```txt
# Core runtime (kept light for Kaggle/Ubuntu)
typer>=0.12.3
PyYAML>=6.0.1
numpy>=1.26.0
pandas>=2.1.0
matplotlib>=3.8.0
plotly>=5.22.0

# NOTE: Install PyTorch separately to match your hardware.
# - Ubuntu (CUDA 12.1 example): pip install torch --index-url https://download.pytorch.org/whl/cu121
# - CPU only:                  pip install torch --index-url https://download.pytorch.org/whl/cpu
# - Kaggle often has torch preinstalled. If not, use the CPU wheel above.
```

# requirements-dev.txt (optional but handy)

```txt
# Dev / QA tooling
ruff>=0.5.0
black>=24.4.0
pytest>=8.2.0
pytest-cov>=5.0.0
mypy>=1.10.0
types-PyYAML
```

# tests/**init**.py

```python
# keeps pytest package discovery happy
```

# tests/test\_cli.py

```python
from __future__ import annotations
import subprocess
import sys
from pathlib import Path

def run_cli(*args: str) -> subprocess.CompletedProcess:
    # Run `python -m spectramind <args>` so it uses the repo-local CLI module.
    return subprocess.run([sys.executable, "-m", "spectramind", *args], capture_output=True, text=True)

def test_version_exits_zero():
    proc = run_cli("--version")
    assert proc.returncode == 0
    assert "SpectraMind V50 CLI" in proc.stdout

def test_resolve_paths_exits_zero():
    # Should not error even if data paths don't exist; resolver will just probe/log.
    proc = run_cli("resolve-paths")
    assert proc.returncode == 0
    # We don't assert on specific output lines because environments differ.

def test_selftest_command_present():
    # If selftest module exists, this should succeed; otherwise it should still exit non-zero gracefully.
    proc = run_cli("selftest")
    # Accept 0 (pass) or 1 (fail) — but should not crash (returncode >1)
    assert proc.returncode in (0, 1)
```

# tests/test\_imports.py

```python
def test_import_top_level():
    import spectramind  # noqa: F401

def test_import_core_modules():
    # These imports verify syntax/packaging only; they don't execute heavy code paths.
    from src.spectramind.model_v50_ar import SpectraMindV50  # noqa: F401
    from src.spectramind.diagnostics.generate_html_report import generate  # noqa: F401
```

## Quick usage

* Local dev:

  ```bash
  pip install -r requirements.txt
  pip install -r requirements-dev.txt   # optional
  pytest -q
  ```
* Kaggle (Notebook):

  ```python
  !pip -q install -r requirements.txt
  # dev tools usually unnecessary in Kaggle; skip requirements-dev.txt
  ```

Want me to bundle these into a tiny ZIP so you can drop them in?
